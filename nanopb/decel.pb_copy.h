/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_DECEL_DECEL_PB_H_INCLUDED
#define PB_DECEL_DECEL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enumération pour les réponses possibles aux messages */
typedef enum _DECEL_MESSAGE_ANSW_ERROR {
    DECEL_MESSAGE_ANSW_ERROR_OK = 0, /* Réponse OK */
    DECEL_MESSAGE_ANSW_ERROR_KO = 1 /* Réponse KO */
} DECEL_MESSAGE_ANSW_ERROR;

/* Enumération pour les types de demande GPIO possibles */
typedef enum _DECEL_GPIO_MESSAGE_ASK_TYPE {
    DECEL_GPIO_MESSAGE_ASK_TYPE_GET_STATE = 0, /* Demande de l'état actuel du GPIO : 0 = input, 1 = output, -1 = Z */
    DECEL_GPIO_MESSAGE_ASK_TYPE_SET_STATE_O = 2, /* Demande de définir l'état du GPIO à O (output) */
    DECEL_GPIO_MESSAGE_ASK_TYPE_SET_STATE_I = 3, /* Demande de définir l'état du GPIO à I (input) */
    DECEL_GPIO_MESSAGE_ASK_TYPE_GET_READ_VALUE = 4, /* Demande de valeur lue par le GPIO, si pas en mode lecture, renvoie -1 */
    DECEL_GPIO_MESSAGE_ASK_TYPE_OUTPUT_SET = 8, /* Mise a 1 de la sortie */
    DECEL_GPIO_MESSAGE_ASK_TYPE_OUTPUT_CLEAR = 9 /* Mise a 0 de la sortie */
} DECEL_GPIO_MESSAGE_ASK_TYPE;

/* Enumération pour les types de réponse GPIO possibles */
typedef enum _DECEL_GPIO_MESSAGE_ANSW_TYPE {
    DECEL_GPIO_MESSAGE_ANSW_TYPE_VALUE = 0, /* Réponse contenant la valeur actuelle du GPIO */
    DECEL_GPIO_MESSAGE_ANSW_TYPE_DIRECTION = 1 /* Réponse contenant la direction actuelle du GPIO */
} DECEL_GPIO_MESSAGE_ANSW_TYPE;

/* Enumération pour les types de message MCP4922 possibles */
typedef enum _DECEL_MCP4922_message_type {
    DECEL_MCP4922_message_type_SET_VALUE_MCP4922 = 0, /* Demande de définir la valeur du MCP4922 */
    DECEL_MCP4922_message_type_SHUTDOWN_MCP4922 = 1 /* Demande de mise hors tension du MCP4922 */
} DECEL_MCP4922_message_type;

/* Enumération pour les types de message MCP41010 possibles */
typedef enum _DECEL_MCP41010_message_type {
    DECEL_MCP41010_message_type_SET_VALUE_MCP41010 = 0, /* Demande de définir la valeur du MCP41010 */
    DECEL_MCP41010_message_type_SHUTDOWN_MCP41010 = 1 /* Demande de mise hors tension du MCP41010 */
} DECEL_MCP41010_message_type;

/* Struct definitions */
/* Message pour demander des informations sur le GPIO */
typedef struct _DECEL_GPIO_ASK {
    int32_t gpio_id; /* ID du GPIO, -1 pour tous les GPIO */
    DECEL_GPIO_MESSAGE_ASK_TYPE type_message; /* Type de demande GPIO */
} DECEL_GPIO_ASK;

/* Message de réponse contenant des informations sur le GPIO */
typedef struct _DECEL_GPIO_ANSW {
    int32_t gpio_id; /* ID du GPIO, -1 pour tous les GPIO */
    DECEL_GPIO_MESSAGE_ANSW_TYPE type_message; /* Type de réponse GPIO */
    bool has_value;
    uint32_t value; /* Valeur (optionnelle) associée à la réponse */
} DECEL_GPIO_ANSW;

/* Message pour demander des informations sur le MCP4922 */
typedef struct _DECEL_MCP4922_ASK {
    uint32_t MCP4922_id; /* ID du MCP4922 */
    uint32_t DAC_Chanel; /* Canal DAC du MCP4922 */
    DECEL_MCP4922_message_type type; /* Type de demande MCP4922 */
    bool has_value;
    uint32_t value; /* Valeur (optionnelle) associée à la demande */
} DECEL_MCP4922_ASK;

/* Message pour demander des informations sur le MCP41010 */
typedef struct _DECEL_MCP41010_ASK {
    uint32_t MCP41010_id; /* ID du MCP41010 */
    DECEL_MCP41010_message_type type; /* Type de demande MCP41010 */
    bool has_value;
    uint32_t value; /* Valeur (optionnelle) associée à la demande */
} DECEL_MCP41010_ASK;

/* Message pour représenter une entrée analogique lue */
typedef struct _DECEL_ANALOG_IN {
    uint32_t ANALOG_IN_id; /* ID de l'entrée analogique */
    uint32_t value; /* Valeur lue */
} DECEL_ANALOG_IN;

/* Message global pour les demandes dans l'application DECEL */
typedef struct _DECEL_DECEL_ASK {
    uint32_t message_id;
    pb_size_t which_msg;
    union {
        DECEL_GPIO_ASK gpio_ask; /* Demande GPIO */
        DECEL_MCP4922_ASK mcp4922_ask; /* Demande MCP4922 */
        DECEL_MCP41010_ASK mcp41010_ask; /* Demande MCP41010 */
    } msg;
} DECEL_DECEL_ASK;

/* Message for acknowledging the reception of a message */
typedef struct _DECEL_ACK {
    int32_t message_id; /* The ID of the message being acknowledged */
    DECEL_MESSAGE_ANSW_ERROR status; /* The status of the processing (OK or KO) */
} DECEL_ACK;

/* Message global pour les données en réponse aux demandes dans l'application DECEL */
typedef struct _DECEL_DECEL_ANSW {
    uint32_t message_id;
    pb_size_t which_msg;
    union {
        DECEL_GPIO_ANSW gpio_data; /* Réponse GPIO */
        DECEL_ANALOG_IN analog_in_data; /* Données d'entrée analogique */
        DECEL_ACK ack;
    } msg;
} DECEL_DECEL_ANSW;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _DECEL_MESSAGE_ANSW_ERROR_MIN DECEL_MESSAGE_ANSW_ERROR_OK
#define _DECEL_MESSAGE_ANSW_ERROR_MAX DECEL_MESSAGE_ANSW_ERROR_KO
#define _DECEL_MESSAGE_ANSW_ERROR_ARRAYSIZE ((DECEL_MESSAGE_ANSW_ERROR)(DECEL_MESSAGE_ANSW_ERROR_KO+1))

#define _DECEL_GPIO_MESSAGE_ASK_TYPE_MIN DECEL_GPIO_MESSAGE_ASK_TYPE_GET_STATE
#define _DECEL_GPIO_MESSAGE_ASK_TYPE_MAX DECEL_GPIO_MESSAGE_ASK_TYPE_OUTPUT_CLEAR
#define _DECEL_GPIO_MESSAGE_ASK_TYPE_ARRAYSIZE ((DECEL_GPIO_MESSAGE_ASK_TYPE)(DECEL_GPIO_MESSAGE_ASK_TYPE_OUTPUT_CLEAR+1))

#define _DECEL_GPIO_MESSAGE_ANSW_TYPE_MIN DECEL_GPIO_MESSAGE_ANSW_TYPE_VALUE
#define _DECEL_GPIO_MESSAGE_ANSW_TYPE_MAX DECEL_GPIO_MESSAGE_ANSW_TYPE_DIRECTION
#define _DECEL_GPIO_MESSAGE_ANSW_TYPE_ARRAYSIZE ((DECEL_GPIO_MESSAGE_ANSW_TYPE)(DECEL_GPIO_MESSAGE_ANSW_TYPE_DIRECTION+1))

#define _DECEL_MCP4922_message_type_MIN DECEL_MCP4922_message_type_SET_VALUE_MCP4922
#define _DECEL_MCP4922_message_type_MAX DECEL_MCP4922_message_type_SHUTDOWN_MCP4922
#define _DECEL_MCP4922_message_type_ARRAYSIZE ((DECEL_MCP4922_message_type)(DECEL_MCP4922_message_type_SHUTDOWN_MCP4922+1))

#define _DECEL_MCP41010_message_type_MIN DECEL_MCP41010_message_type_SET_VALUE_MCP41010
#define _DECEL_MCP41010_message_type_MAX DECEL_MCP41010_message_type_SHUTDOWN_MCP41010
#define _DECEL_MCP41010_message_type_ARRAYSIZE ((DECEL_MCP41010_message_type)(DECEL_MCP41010_message_type_SHUTDOWN_MCP41010+1))

#define DECEL_GPIO_ASK_type_message_ENUMTYPE DECEL_GPIO_MESSAGE_ASK_TYPE

#define DECEL_GPIO_ANSW_type_message_ENUMTYPE DECEL_GPIO_MESSAGE_ANSW_TYPE

#define DECEL_MCP4922_ASK_type_ENUMTYPE DECEL_MCP4922_message_type

#define DECEL_MCP41010_ASK_type_ENUMTYPE DECEL_MCP41010_message_type



#define DECEL_ACK_status_ENUMTYPE DECEL_MESSAGE_ANSW_ERROR



/* Initializer values for message structs */
#define DECEL_GPIO_ASK_init_default              {0, _DECEL_GPIO_MESSAGE_ASK_TYPE_MIN}
#define DECEL_GPIO_ANSW_init_default             {0, _DECEL_GPIO_MESSAGE_ANSW_TYPE_MIN, false, 0}
#define DECEL_MCP4922_ASK_init_default           {0, 0, _DECEL_MCP4922_message_type_MIN, false, 0}
#define DECEL_MCP41010_ASK_init_default          {0, _DECEL_MCP41010_message_type_MIN, false, 0}
#define DECEL_ANALOG_IN_init_default             {0, 0}
#define DECEL_DECEL_ASK_init_default             {0, 0, {DECEL_GPIO_ASK_init_default}}
#define DECEL_ACK_init_default                   {0, _DECEL_MESSAGE_ANSW_ERROR_MIN}
#define DECEL_DECEL_ANSW_init_default            {0, 0, {DECEL_GPIO_ANSW_init_default}}
#define DECEL_GPIO_ASK_init_zero                 {0, _DECEL_GPIO_MESSAGE_ASK_TYPE_MIN}
#define DECEL_GPIO_ANSW_init_zero                {0, _DECEL_GPIO_MESSAGE_ANSW_TYPE_MIN, false, 0}
#define DECEL_MCP4922_ASK_init_zero              {0, 0, _DECEL_MCP4922_message_type_MIN, false, 0}
#define DECEL_MCP41010_ASK_init_zero             {0, _DECEL_MCP41010_message_type_MIN, false, 0}
#define DECEL_ANALOG_IN_init_zero                {0, 0}
#define DECEL_DECEL_ASK_init_zero                {0, 0, {DECEL_GPIO_ASK_init_zero}}
#define DECEL_ACK_init_zero                      {0, _DECEL_MESSAGE_ANSW_ERROR_MIN}
#define DECEL_DECEL_ANSW_init_zero               {0, 0, {DECEL_GPIO_ANSW_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define DECEL_GPIO_ASK_gpio_id_tag               1
#define DECEL_GPIO_ASK_type_message_tag          2
#define DECEL_GPIO_ANSW_gpio_id_tag              1
#define DECEL_GPIO_ANSW_type_message_tag         2
#define DECEL_GPIO_ANSW_value_tag                3
#define DECEL_MCP4922_ASK_MCP4922_id_tag         1
#define DECEL_MCP4922_ASK_DAC_Chanel_tag         2
#define DECEL_MCP4922_ASK_type_tag               3
#define DECEL_MCP4922_ASK_value_tag              4
#define DECEL_MCP41010_ASK_MCP41010_id_tag       1
#define DECEL_MCP41010_ASK_type_tag              3
#define DECEL_MCP41010_ASK_value_tag             4
#define DECEL_ANALOG_IN_ANALOG_IN_id_tag         1
#define DECEL_ANALOG_IN_value_tag                2
#define DECEL_DECEL_ASK_message_id_tag           1
#define DECEL_DECEL_ASK_gpio_ask_tag             2
#define DECEL_DECEL_ASK_mcp4922_ask_tag          3
#define DECEL_DECEL_ASK_mcp41010_ask_tag         4
#define DECEL_ACK_message_id_tag                 1
#define DECEL_ACK_status_tag                     2
#define DECEL_DECEL_ANSW_message_id_tag          1
#define DECEL_DECEL_ANSW_gpio_data_tag           2
#define DECEL_DECEL_ANSW_analog_in_data_tag      3
#define DECEL_DECEL_ANSW_ack_tag                 4

/* Struct field encoding specification for nanopb */
#define DECEL_GPIO_ASK_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    gpio_id,           1) \
X(a, STATIC,   SINGULAR, UENUM,    type_message,      2)
#define DECEL_GPIO_ASK_CALLBACK NULL
#define DECEL_GPIO_ASK_DEFAULT NULL

#define DECEL_GPIO_ANSW_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    gpio_id,           1) \
X(a, STATIC,   SINGULAR, UENUM,    type_message,      2) \
X(a, STATIC,   OPTIONAL, UINT32,   value,             3)
#define DECEL_GPIO_ANSW_CALLBACK NULL
#define DECEL_GPIO_ANSW_DEFAULT NULL

#define DECEL_MCP4922_ASK_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   MCP4922_id,        1) \
X(a, STATIC,   SINGULAR, UINT32,   DAC_Chanel,        2) \
X(a, STATIC,   SINGULAR, UENUM,    type,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   value,             4)
#define DECEL_MCP4922_ASK_CALLBACK NULL
#define DECEL_MCP4922_ASK_DEFAULT NULL

#define DECEL_MCP41010_ASK_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   MCP41010_id,       1) \
X(a, STATIC,   SINGULAR, UENUM,    type,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   value,             4)
#define DECEL_MCP41010_ASK_CALLBACK NULL
#define DECEL_MCP41010_ASK_DEFAULT NULL

#define DECEL_ANALOG_IN_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   ANALOG_IN_id,      1) \
X(a, STATIC,   SINGULAR, UINT32,   value,             2)
#define DECEL_ANALOG_IN_CALLBACK NULL
#define DECEL_ANALOG_IN_DEFAULT NULL

#define DECEL_DECEL_ASK_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   message_id,        1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,gpio_ask,msg.gpio_ask),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,mcp4922_ask,msg.mcp4922_ask),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,mcp41010_ask,msg.mcp41010_ask),   4)
#define DECEL_DECEL_ASK_CALLBACK NULL
#define DECEL_DECEL_ASK_DEFAULT NULL
#define DECEL_DECEL_ASK_msg_gpio_ask_MSGTYPE DECEL_GPIO_ASK
#define DECEL_DECEL_ASK_msg_mcp4922_ask_MSGTYPE DECEL_MCP4922_ASK
#define DECEL_DECEL_ASK_msg_mcp41010_ask_MSGTYPE DECEL_MCP41010_ASK

#define DECEL_ACK_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    message_id,        1) \
X(a, STATIC,   SINGULAR, UENUM,    status,            2)
#define DECEL_ACK_CALLBACK NULL
#define DECEL_ACK_DEFAULT NULL

#define DECEL_DECEL_ANSW_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   message_id,        1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,gpio_data,msg.gpio_data),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,analog_in_data,msg.analog_in_data),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,ack,msg.ack),   4)
#define DECEL_DECEL_ANSW_CALLBACK NULL
#define DECEL_DECEL_ANSW_DEFAULT NULL
#define DECEL_DECEL_ANSW_msg_gpio_data_MSGTYPE DECEL_GPIO_ANSW
#define DECEL_DECEL_ANSW_msg_analog_in_data_MSGTYPE DECEL_ANALOG_IN
#define DECEL_DECEL_ANSW_msg_ack_MSGTYPE DECEL_ACK

extern const pb_msgdesc_t DECEL_GPIO_ASK_msg;
extern const pb_msgdesc_t DECEL_GPIO_ANSW_msg;
extern const pb_msgdesc_t DECEL_MCP4922_ASK_msg;
extern const pb_msgdesc_t DECEL_MCP41010_ASK_msg;
extern const pb_msgdesc_t DECEL_ANALOG_IN_msg;
extern const pb_msgdesc_t DECEL_DECEL_ASK_msg;
extern const pb_msgdesc_t DECEL_ACK_msg;
extern const pb_msgdesc_t DECEL_DECEL_ANSW_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define DECEL_GPIO_ASK_fields &DECEL_GPIO_ASK_msg
#define DECEL_GPIO_ANSW_fields &DECEL_GPIO_ANSW_msg
#define DECEL_MCP4922_ASK_fields &DECEL_MCP4922_ASK_msg
#define DECEL_MCP41010_ASK_fields &DECEL_MCP41010_ASK_msg
#define DECEL_ANALOG_IN_fields &DECEL_ANALOG_IN_msg
#define DECEL_DECEL_ASK_fields &DECEL_DECEL_ASK_msg
#define DECEL_ACK_fields &DECEL_ACK_msg
#define DECEL_DECEL_ANSW_fields &DECEL_DECEL_ANSW_msg

/* Maximum encoded size of messages (where known) */
#define DECEL_ACK_size                           13
#define DECEL_ANALOG_IN_size                     12
#define DECEL_DECEL_ANSW_size                    27
#define DECEL_DECEL_ASK_size                     28
#define DECEL_DECEL_PB_H_MAX_SIZE                DECEL_DECEL_ASK_size
#define DECEL_GPIO_ANSW_size                     19
#define DECEL_GPIO_ASK_size                      13
#define DECEL_MCP41010_ASK_size                  14
#define DECEL_MCP4922_ASK_size                   20

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
